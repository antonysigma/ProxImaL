#pragma once
#include <Halide.h>

#include <utility>

using namespace Halide;

#include "prior_transforms.h"
#include "problem-config.h"
#include "problem-interface.h"
#include "prox_operators.h"
#include "prox_parameterized.h"

namespace problem_definition {

using proximal::prox::ParameterizedProx;

/** Transform between variables z and u.
 *
 * This is a demonstration of how ProxImaL should generate Halide code for the
 * (L-)ADMM solver. In this example, the end-user defines the TV-regularizaed
 * denoising problem with non-negative constraints in Proximal language. Then,
 * the ProxImaL-Gen module exports the following functions automatically.
 *
 * Currently (Sept, 2022), ProxImaL has not yet implemented Halide-codegen
 * feature in ProxImal. Here, we manualy craft the transform in Halide code as
 * an example.
 */
struct Transform {
    constexpr static auto width = problem_config::output_width;
    constexpr static auto height = problem_config::output_height;
    constexpr static auto N = problem_config::psi_size;

    /** Compute dx, dy of a two dimensional image with c number of channels. */
    FuncTuple<N> forward(const Func& u) {
        /* Begin code-generation */
{%- for item in forward_op -%}
{%- for code in item.stages -%}
        {{ code }}
{%- endfor -%}
{%- endfor -%}
	return {
{%- for item in forward_op -%}
        {{ item.output_name }}{{ ", " if not loop.last else "" }}
{%- endfor -%}
    };
        /* End code-generation */
    }

    Func adjoint(const FuncTuple<N>& z) {
        /* Begin code-generation */
{%- for item in adjoint_op -%}
{%- for code in item.stages -%}
        {{ code }}
{%- endfor -%}
{%- endfor -%}

    using Halide::_;
    Func sum_KTz{"sum_KTz"};
    sum_KTz(_) = {%- for item in adjoint_op -%}
        {{ item.output_name }}(_){{ " + " if not loop.last else "" }}
{%- endfor -%};

	return sum_KTz;
        /* End code-generation */
    }
} K;

#if __cplusplus >= 202002L

// If C++20 is supported, validate the transform structure.
static_assert(LinOpGrah<Transform>);
#endif

/** List of functions in set Omega, after problem splitting by ProxImaL. */
const ParameterizedProx omega_fn{
    /* Begin code-generation */
    /* . prox = */ [](const Func& v, const Expr& rho) -> Func {
        return {{ omega_fn_name }}(v, 1.0f / rho);
    },
    /* .alpha = */ {{ omega_fn.alpha }}f,
    /* .beta = */ {{ omega_fn.beta }}f,
    /* .gamma = */ {{ omega_fn.gamma }}f,
    /* ._c = */ 0.0f,
    /* .d = */ 0.0f,
    /* .n_dim = 3, */
    /* End code-generation */
};

#if __cplusplus >= 202002L

// If C++20 is supported, validate the transform structure.
static_assert(Prox<ParameterizedProx>);
#endif

/** List of functions in set Psi, after problem splitting by ProxImaL.
 *
 * Note(Antony): these proximal functions can be parameterized with
 * proximal::prox::ParameterizedProx . But first the class needs to be generalized to 4D signal.
 *
 * TODO(Antony): Use C++20 reference designator to initialize fields. This requires Halide >= 14.0.
 */
const std::array<ParameterizedProx, problem_config::psi_size> psi_fns{
    /* Begin code generation */
{% for p,name in psi_fns %}
    /* . prox = */ [](const Func& v, const Expr& rho) -> Func {
        return {{ name }}(v, 1 / rho);
    },
    /* .alpha = */ {{ p.alpha }}f,
    /* .beta = */ {{ p.beta }}f,
    /* .gamma = */ {{ p.gamma }}f,
    /* ._c = */ 0.0f,
    /* .d = */ 0.0f,
    /* .n_dim = */ {{ p.lin_ops[-1].output_dims|length if (p.lin_ops|length) > 0 else u.shape|length }}
    }
{% endfor %}
    /* End code-generation */
};

}  // namespace problem_definition
