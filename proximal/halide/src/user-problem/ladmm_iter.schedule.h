#ifndef ladmm_iter_SCHEDULE_H
#define ladmm_iter_SCHEDULE_H

// MACHINE GENERATED -- DO NOT EDIT
// This schedule was automatically generated by Mullapudi2016
// for target=x86-64-linux-avx-avx2-f16c-fma-sse41  // NOLINT
// with machine_params=128,1048576,20

#include "Halide.h"


inline void apply_schedule_ladmm_iter(
    ::Halide::Pipeline pipeline,
    ::Halide::Target target
) {
    using ::Halide::Func;
    using ::Halide::MemoryType;
    using ::Halide::RVar;
    using ::Halide::TailStrategy;
    using ::Halide::Var;
    Var x{"x"};
    Var y{"y"};
    Var x_i("x_i");
    Var x_i_vi("x_i_vi");
    Var x_i_vo("x_i_vo");
    Var x_o("x_o");
    Var x_vi("x_vi");
    Var x_vo("x_vo");
    Var y_i("y_i");
    Var y_o("y_o");

    Func Kvzu_1 = pipeline.get_func(38);
    Func Kvzu_3 = pipeline.get_func(90);
    Func Kvzu_5 = pipeline.get_func(141);
    Func Kvzu_7 = pipeline.get_func(192);
    Func Kx_8 = pipeline.get_func(232);
    Func blurred = pipeline.get_func(26);
    Func blurred_1 = pipeline.get_func(47);
    Func blurred_10 = pipeline.get_func(201);
    Func blurred_11 = pipeline.get_func(217);
    Func blurred_12 = pipeline.get_func(237);
    Func blurred_13 = pipeline.get_func(284);
    Func blurred_14 = pipeline.get_func(262);
    Func blurred_2 = pipeline.get_func(68);
    Func blurred_3 = pipeline.get_func(82);
    Func blurred_4 = pipeline.get_func(99);
    Func blurred_5 = pipeline.get_func(120);
    Func blurred_6 = pipeline.get_func(133);
    Func blurred_7 = pipeline.get_func(150);
    Func blurred_8 = pipeline.get_func(171);
    Func blurred_9 = pipeline.get_func(184);
    Func blurred_x = pipeline.get_func(25);
    Func blurred_x_1 = pipeline.get_func(46);
    Func blurred_x_10 = pipeline.get_func(200);
    Func blurred_x_11 = pipeline.get_func(216);
    Func blurred_x_12 = pipeline.get_func(236);
    Func blurred_x_13 = pipeline.get_func(283);
    Func blurred_x_14 = pipeline.get_func(261);
    Func blurred_x_2 = pipeline.get_func(67);
    Func blurred_x_3 = pipeline.get_func(81);
    Func blurred_x_4 = pipeline.get_func(98);
    Func blurred_x_5 = pipeline.get_func(119);
    Func blurred_x_6 = pipeline.get_func(132);
    Func blurred_x_7 = pipeline.get_func(149);
    Func blurred_x_8 = pipeline.get_func(170);
    Func blurred_x_9 = pipeline.get_func(183);
    Func dx_1 = pipeline.get_func(53);
    Func dx_3 = pipeline.get_func(105);
    Func dx_5 = pipeline.get_func(156);
    Func dx_7 = pipeline.get_func(208);
    Func dy_1 = pipeline.get_func(54);
    Func dy_3 = pipeline.get_func(106);
    Func dy_5 = pipeline.get_func(157);
    Func dy_7 = pipeline.get_func(209);
    Func eps_dual = pipeline.get_func(288);
    Func eps_pri = pipeline.get_func(271);
    Func f24 = pipeline.get_func(50);
    Func f36 = pipeline.get_func(102);
    Func f42 = pipeline.get_func(112);
    Func f48 = pipeline.get_func(153);
    Func f54 = pipeline.get_func(163);
    Func f55 = pipeline.get_func(181);
    Func f60 = pipeline.get_func(204);
    Func f65 = pipeline.get_func(214);
    Func f66 = pipeline.get_func(227);
    Func f67 = pipeline.get_func(228);
    Func f69 = pipeline.get_func(286);
    Func f70 = pipeline.get_func(233);
    Func f71 = pipeline.get_func(245);
    Func f73 = pipeline.get_func(253);
    Func f74 = pipeline.get_func(264);
    Func mirror_image_1 = pipeline.get_func(20);
    Func mirror_image_10 = pipeline.get_func(165);
    Func mirror_image_14 = pipeline.get_func(249);
    Func mirror_image_4 = pipeline.get_func(62);
    Func mirror_image_7 = pipeline.get_func(114);
    Func pInput_2 = pipeline.get_func(161);
    Func r = pipeline.get_func(247);
    Func resampled = pipeline.get_func(35);
    Func resampled_1 = pipeline.get_func(75);
    Func resampled_2 = pipeline.get_func(89);
    Func resampled_3 = pipeline.get_func(127);
    Func resampled_4 = pipeline.get_func(140);
    Func resampled_5 = pipeline.get_func(178);
    Func resampled_6 = pipeline.get_func(191);
    Func resampled_7 = pipeline.get_func(224);
    Func resampled_8 = pipeline.get_func(244);
    Func resampled_at = pipeline.get_func(43);
    Func resampled_at_1 = pipeline.get_func(95);
    Func resampled_at_2 = pipeline.get_func(146);
    Func resampled_at_3 = pipeline.get_func(197);
    Func resampled_at_4 = pipeline.get_func(280);
    Func resampled_at_5 = pipeline.get_func(258);
    Func resampled_sum = pipeline.get_func(44);
    Func resampled_sum_1 = pipeline.get_func(96);
    Func resampled_sum_2 = pipeline.get_func(147);
    Func resampled_sum_3 = pipeline.get_func(198);
    Func resampled_sum_4 = pipeline.get_func(281);
    Func resampled_sum_5 = pipeline.get_func(259);
    Func s = pipeline.get_func(266);
    Func scaled = pipeline.get_func(27);
    Func scaled_11 = pipeline.get_func(218);
    Func scaled_2 = pipeline.get_func(69);
    Func scaled_3 = pipeline.get_func(83);
    Func scaled_5 = pipeline.get_func(121);
    Func scaled_6 = pipeline.get_func(134);
    Func scaled_8 = pipeline.get_func(172);
    Func scaled_9 = pipeline.get_func(185);
    Func sumsq = pipeline.get_func(267);
    Func sumsq_1 = pipeline.get_func(268);
    Func sumsq_2 = pipeline.get_func(269);
    Func sumsq_3 = pipeline.get_func(270);
    Func sumsq_4 = pipeline.get_func(287);
    Func sumsq_5 = pipeline.get_func(234);
    Func sumsq_6 = pipeline.get_func(246);
    Func sumsq_7 = pipeline.get_func(265);
    Func v_new = pipeline.get_func(206);
    Func xhat_2 = pipeline.get_func(180);
    Func xhat_3 = pipeline.get_func(226);

    {
        Var x = Kvzu_1.args()[0];
        Var y = Kvzu_1.args()[1];
        Var k = Kvzu_1.args()[2];
        Kvzu_1
            .compute_root()
            .split(x, x_o, x_i, 64)
            .reorder(x_i, x_o, y, k)
            .gpu_threads(x_i)
            .gpu_blocks(k)
            .gpu_blocks(y);
    }
    {
        Var x = Kvzu_3.args()[0];
        Var y = Kvzu_3.args()[1];
        Var k = Kvzu_3.args()[2];
        Kvzu_3
            .compute_root()
            .split(x, x_o, x_i, 64)
            .reorder(x_i, x_o, y, k)
            .gpu_threads(x_i)
            .gpu_blocks(k)
            .gpu_blocks(y);
    }
    {
        Var x = Kvzu_5.args()[0];
        Var y = Kvzu_5.args()[1];
        Var k = Kvzu_5.args()[2];
        Kvzu_5
            .compute_root()
            .split(x, x_o, x_i, 64)
            .reorder(x_i, x_o, y, k)
            .gpu_threads(x_i)
            .gpu_blocks(k)
            .gpu_blocks(y);
    }
    {
        Var x = Kvzu_7.args()[0];
        Var y = Kvzu_7.args()[1];
        Var k = Kvzu_7.args()[2];
        Kvzu_7
            .compute_root()
            .split(x, x_o, x_i, 64)
            .reorder(x_i, x_o, y, k)
            .gpu_threads(x_i)
            .gpu_blocks(k)
            .gpu_blocks(y);
    }
    {
        Var x = Kx_8.args()[0];
        Var y = Kx_8.args()[1];
        Var k = Kx_8.args()[2];
        Kx_8
            .compute_root()
            .split(x, x_vo, x_vi, 64)
            .gpu_threads(x_vi)
            .gpu_blocks(k)
            .gpu_blocks(y);
    }
    RVar blur_window$x(blurred.update(0).get_schedule().rvars()[0].var);
    {
        Var x = blurred.args()[0];
        blurred
            .compute_at(scaled, x_o)
            .gpu_threads(x);
        blurred.update(0)
            .reorder(x, blur_window$x, y)
            .gpu_threads(x);
    }
    {
        Var x = blurred_1.args()[0];
        blurred_1
            .compute_at(f24, x_o)
            .gpu_threads(x);
        blurred_1.update(0)
            .reorder(x, blur_window$x, y)
            .gpu_threads(x);
    }
    {
        Var x = blurred_10.args()[0];
        blurred_10
            .compute_at(f60, x_o)
            .gpu_threads(x);
        blurred_10.update(0)
            .reorder(x, blur_window$x, y)
            .gpu_threads(x);
    }
    {
        Var x = blurred_11.args()[0];
        blurred_11
            .compute_at(scaled_11, x_o)
            .gpu_threads(x);
        blurred_11.update(0)
            .reorder(x, blur_window$x, y)
            .gpu_threads(x);
    }
    {
        Var x = blurred_12.args()[0];
        Var y = blurred_12.args()[1];
        RVar blur_window$x(blurred_12.update(0).get_schedule().rvars()[0].var);
        blurred_12
            .compute_root()
            .split(x, x_vo, x_vi, 64)
            .gpu_threads(x_vi)
            .gpu_blocks(y);
        blurred_12.update(0)
            .reorder(x, blur_window$x, y)
            .split(x, x_o, x_i, 64, TailStrategy::GuardWithIf)
            .split(y, y_o, y_i, 64, TailStrategy::GuardWithIf)
            .reorder(x_i, blur_window$x, y_i, x_o, y_o)
            .split(x_i, x_i_vo, x_i_vi, 8, TailStrategy::GuardWithIf)
            .gpu_threads(x_i_vi)
            .gpu_blocks(y_o)
            .gpu_blocks(x_o);
    }
    {
        Var x = blurred_13.args()[0];
        RVar blur_window$x(blurred_13.update(0).get_schedule().rvars()[0].var);
        blurred_13
            .compute_at(f69, x_o)
            .split(x, x_vo, x_vi, 64)
            .gpu_threads(x_vi);
        blurred_13.update(0)
            .reorder(x, blur_window$x, y)
            .split(x, x_vo, x_vi, 8, TailStrategy::GuardWithIf)
            .gpu_threads(x_vi);
    }
    {
        Var x = blurred_14.args()[0];
        RVar blur_window$x(blurred_14.update(0).get_schedule().rvars()[0].var);
        blurred_14
            .compute_at(f74, x_o)
            .split(x, x_vo, x_vi, 64)
            .gpu_threads(x_vi);
        blurred_14.update(0)
            .reorder(x, blur_window$x, y)
            .split(x, x_vo, x_vi, 8, TailStrategy::GuardWithIf)
            .gpu_threads(x_vi);
    }
    {
        Var x = blurred_2.args()[0];
        RVar blur_window$x(blurred_2.update(0).get_schedule().rvars()[0].var);
        blurred_2
            .compute_at(scaled_2, x_o)
            .split(x, x_vo, x_vi, 64)
            .gpu_threads(x_vi);
        blurred_2.update(0)
            .reorder(x, blur_window$x, y)
            .split(x, x_vo, x_vi, 8, TailStrategy::GuardWithIf)
            .gpu_threads(x_vi);
    }
    {
        Var x = blurred_3.args()[0];
        RVar blur_window$x(blurred_3.update(0).get_schedule().rvars()[0].var);
        blurred_3
            .compute_at(scaled_3, x_o)
            .split(x, x_vo, x_vi, 64)
            .gpu_threads(x_vi);
        blurred_3.update(0)
            .reorder(x, blur_window$x, y)
            .split(x, x_vo, x_vi, 8, TailStrategy::GuardWithIf)
            .gpu_threads(x_vi);
    }
    {
        Var x = blurred_4.args()[0];
        RVar blur_window$x(blurred_4.update(0).get_schedule().rvars()[0].var);
        blurred_4
            .compute_at(f36, x_o)
            .split(x, x_vo, x_vi, 64)
            .gpu_threads(x_vi);
        blurred_4.update(0)
            .reorder(x, blur_window$x, y)
            .split(x, x_vo, x_vi, 8, TailStrategy::GuardWithIf)
            .gpu_threads(x_vi);
    }
    {
        Var x = blurred_5.args()[0];
        RVar blur_window$x(blurred_5.update(0).get_schedule().rvars()[0].var);
        blurred_5
            .compute_at(scaled_5, x_o)
            .split(x, x_vo, x_vi, 64)
            .gpu_threads(x_vi);
        blurred_5.update(0)
            .reorder(x, blur_window$x, y)
            .split(x, x_vo, x_vi, 8, TailStrategy::GuardWithIf)
            .gpu_threads(x_vi);
    }
    {
        Var x = blurred_6.args()[0];
        RVar blur_window$x(blurred_6.update(0).get_schedule().rvars()[0].var);
        blurred_6
            .compute_at(scaled_6, x_o)
            .split(x, x_vo, x_vi, 64)
            .gpu_threads(x_vi);
        blurred_6.update(0)
            .reorder(x, blur_window$x, y)
            .split(x, x_vo, x_vi, 8, TailStrategy::GuardWithIf)
            .gpu_threads(x_vi);
    }
    {
        Var x = blurred_7.args()[0];
        RVar blur_window$x(blurred_7.update(0).get_schedule().rvars()[0].var);
        blurred_7
            .compute_at(f48, x_o)
            .split(x, x_vo, x_vi, 64)
            .gpu_threads(x_vi);
        blurred_7.update(0)
            .reorder(x, blur_window$x, y)
            .split(x, x_vo, x_vi, 8, TailStrategy::GuardWithIf)
            .gpu_threads(x_vi);
    }
    {
        Var x = blurred_8.args()[0];
        RVar blur_window$x(blurred_8.update(0).get_schedule().rvars()[0].var);
        blurred_8
            .compute_at(scaled_8, x_o)
            .split(x, x_vo, x_vi, 64)
            .gpu_threads(x_vi);
        blurred_8.update(0)
            .reorder(x, blur_window$x, y)
            .split(x, x_vo, x_vi, 8, TailStrategy::GuardWithIf)
            .gpu_threads(x_vi);
    }
    {
        Var x = blurred_9.args()[0];
        RVar blur_window$x(blurred_9.update(0).get_schedule().rvars()[0].var);
        blurred_9
            .compute_at(scaled_9, x_o)
            .split(x, x_vo, x_vi, 64)
            .gpu_threads(x_vi);
        blurred_9.update(0)
            .reorder(x, blur_window$x, y)
            .split(x, x_vo, x_vi, 8, TailStrategy::GuardWithIf)
            .gpu_threads(x_vi);
    }
    {
        Var x = blurred_x.args()[0];
        blurred_x
            .compute_at(scaled, x_o)
            .split(x, x_vo, x_vi, 64)
            .gpu_threads(x_vi);
        blurred_x.update(0)
            .split(x, x_vo, x_vi, 8, TailStrategy::GuardWithIf)
            .gpu_threads(x_vi);
    }
    {
        Var x = blurred_x_1.args()[0];
        Var y = blurred_x_1.args()[1];
        blurred_x_1
            .compute_root()
            .split(x, x_vo, x_vi, 64)
            .gpu_threads(x_vi)
            .gpu_blocks(y);
        blurred_x_1.update(0)
            .split(x, x_o, x_i, 128, TailStrategy::GuardWithIf)
            .reorder(blur_window$x, x_i, x_o, y)
            .split(x_i, x_i_vo, x_i_vi, 8, TailStrategy::GuardWithIf)
            .gpu_threads(x_i_vi)
            .gpu_blocks(y);
    }
    {
        Var x = blurred_x_10.args()[0];
        Var y = blurred_x_10.args()[1];
        blurred_x_10
            .compute_root()
            .split(x, x_vo, x_vi, 64)
            .gpu_threads(x_vi)
            .gpu_blocks(y);
        blurred_x_10.update(0)
            .split(x, x_o, x_i, 128, TailStrategy::GuardWithIf)
            .reorder(blur_window$x, x_i, x_o, y)
            .split(x_i, x_i_vo, x_i_vi, 8, TailStrategy::GuardWithIf)
            .gpu_threads(x_i_vi)
            .gpu_blocks(y);
    }
    {
        Var x = blurred_x_11.args()[0];
        blurred_x_11
            .compute_at(scaled_11, x_o)
            .split(x, x_vo, x_vi, 64)
            .gpu_threads(x_vi);
        blurred_x_11.update(0)
            .split(x, x_vo, x_vi, 8, TailStrategy::GuardWithIf)
            .gpu_threads(x_vi);
    }
    {
        Var x = blurred_x_12.args()[0];
        blurred_x_12
            .compute_at(blurred_12, x_o)
            .split(x, x_vo, x_vi, 64)
            .gpu_threads(x_vi);
        blurred_x_12.update(0)
            .split(x, x_vo, x_vi, 8, TailStrategy::GuardWithIf)
            .gpu_threads(x_vi);
    }
    {
        Var x = blurred_x_13.args()[0];
        Var y = blurred_x_13.args()[1];
        blurred_x_13
            .compute_root()
            .split(x, x_vo, x_vi, 64)
            .gpu_threads(x_vi)
            .gpu_blocks(y);
        blurred_x_13.update(0)
            .split(x, x_o, x_i, 128, TailStrategy::GuardWithIf)
            .reorder(blur_window$x, x_i, x_o, y)
            .split(x_i, x_i_vo, x_i_vi, 8, TailStrategy::GuardWithIf)
            .gpu_threads(x_i_vi)
            .gpu_blocks(y);
    }
    {
        Var x = blurred_x_14.args()[0];
        Var y = blurred_x_14.args()[1];
        blurred_x_14
            .compute_root()
            .split(x, x_vo, x_vi, 64)
            .gpu_threads(x_vi)
            .gpu_blocks(y);
        blurred_x_14.update(0)
            .split(x, x_o, x_i, 128, TailStrategy::GuardWithIf)
            .reorder(blur_window$x, x_i, x_o, y)
            .split(x_i, x_i_vo, x_i_vi, 8, TailStrategy::GuardWithIf)
            .gpu_threads(x_i_vi)
            .gpu_blocks(y);
    }
    {
        Var x = blurred_x_2.args()[0];
        blurred_x_2
            .compute_at(scaled_2, x_o)
            .split(x, x_vo, x_vi, 64)
            .gpu_threads(x_vi);
        blurred_x_2.update(0)
            .split(x, x_vo, x_vi, 8, TailStrategy::GuardWithIf)
            .gpu_threads(x_vi);
    }
    {
        Var x = blurred_x_3.args()[0];
        blurred_x_3
            .compute_at(scaled_3, x_o)
            .split(x, x_vo, x_vi, 64)
            .gpu_threads(x_vi);
        blurred_x_3.update(0)
            .split(x, x_vo, x_vi, 8, TailStrategy::GuardWithIf)
            .gpu_threads(x_vi);
    }
    {
        Var x = blurred_x_4.args()[0];
        Var y = blurred_x_4.args()[1];
        blurred_x_4
            .compute_root()
            .split(x, x_vo, x_vi, 64)
            .gpu_threads(x_vi)
            .gpu_blocks(y);
        blurred_x_4.update(0)
            .split(x, x_o, x_i, 128, TailStrategy::GuardWithIf)
            .reorder(blur_window$x, x_i, x_o, y)
            .split(x_i, x_i_vo, x_i_vi, 8, TailStrategy::GuardWithIf)
            .gpu_threads(x_i_vi)
            .gpu_blocks(y);
    }
    {
        Var x = blurred_x_5.args()[0];
        blurred_x_5
            .compute_at(scaled_5, x_o)
            .split(x, x_vo, x_vi, 64)
            .gpu_threads(x_vi);
        blurred_x_5.update(0)
            .split(x, x_vo, x_vi, 8, TailStrategy::GuardWithIf)
            .gpu_threads(x_vi);
    }
    {
        Var x = blurred_x_6.args()[0];
        blurred_x_6
            .compute_at(scaled_6, x_o)
            .split(x, x_vo, x_vi, 64)
            .gpu_threads(x_vi);
        blurred_x_6.update(0)
            .split(x, x_vo, x_vi, 8, TailStrategy::GuardWithIf)
            .gpu_threads(x_vi);
    }
    {
        Var x = blurred_x_7.args()[0];
        Var y = blurred_x_7.args()[1];
        blurred_x_7
            .compute_root()
            .split(x, x_vo, x_vi, 64)
            .gpu_threads(x_vi)
            .gpu_blocks(y);
        blurred_x_7.update(0)
            .split(x, x_o, x_i, 128, TailStrategy::GuardWithIf)
            .reorder(blur_window$x, x_i, x_o, y)
            .split(x_i, x_i_vo, x_i_vi, 8, TailStrategy::GuardWithIf)
            .gpu_threads(x_i_vi)
            .gpu_blocks(y);
    }
    {
        Var x = blurred_x_8.args()[0];
        blurred_x_8
            .compute_at(scaled_8, x_o)
            .split(x, x_vo, x_vi, 64)
            .gpu_threads(x_vi);
        blurred_x_8.update(0)
            .split(x, x_vo, x_vi, 8, TailStrategy::GuardWithIf)
            .gpu_threads(x_vi);
    }
    {
        Var x = blurred_x_9.args()[0];
        blurred_x_9
            .compute_at(scaled_9, x_o)
            .split(x, x_vo, x_vi, 64)
            .gpu_threads(x_vi);
        blurred_x_9.update(0)
            .split(x, x_vo, x_vi, 8, TailStrategy::GuardWithIf)
            .gpu_threads(x_vi);
    }
    {
        Var x = dx_1.args()[0];
        Var y = dx_1.args()[1];
        dx_1
            .compute_root()
            .split(x, x_vo, x_vi, 64)
            .gpu_threads(x_vi)
            .gpu_blocks(y);
    }
    {
        Var x = dx_3.args()[0];
        Var y = dx_3.args()[1];
        dx_3
            .compute_root()
            .split(x, x_vo, x_vi, 64)
            .gpu_threads(x_vi)
            .gpu_blocks(y);
    }
    {
        Var x = dx_5.args()[0];
        Var y = dx_5.args()[1];
        dx_5
            .compute_root()
            .split(x, x_vo, x_vi, 64)
            .gpu_threads(x_vi)
            .gpu_blocks(y);
    }
    {
        Var x = dx_7.args()[0];
        Var y = dx_7.args()[1];
        dx_7
            .compute_root()
            .split(x, x_vo, x_vi, 64)
            .gpu_threads(x_vi)
            .gpu_blocks(y);
    }
    {
        Var x = dy_1.args()[0];
        Var y = dy_1.args()[1];
        dy_1
            .compute_root()
            .split(x, x_vo, x_vi, 64)
            .gpu_threads(x_vi)
            .gpu_blocks(y);
    }
    {
        Var x = dy_3.args()[0];
        Var y = dy_3.args()[1];
        dy_3
            .compute_root()
            .split(x, x_vo, x_vi, 64)
            .gpu_threads(x_vi)
            .gpu_blocks(y);
    }
    {
        Var x = dy_5.args()[0];
        Var y = dy_5.args()[1];
        dy_5
            .compute_root()
            .split(x, x_vo, x_vi, 64)
            .gpu_threads(x_vi)
            .gpu_blocks(y);
    }
    {
        Var x = dy_7.args()[0];
        Var y = dy_7.args()[1];
        dy_7
            .compute_root()
            .split(x, x_vo, x_vi, 64)
            .gpu_threads(x_vi)
            .gpu_blocks(y);
    }
    {
        eps_dual
            .compute_root();
    }
    {
        eps_pri
            .compute_root();
    }
    {
        Var x = f24.args()[0];
        Var y = f24.args()[1];
        f24
            .compute_root()
            .split(x, x_o, x_i, 64)
            .reorder(x_i, x_o, y)
            .split(x_i, x_i_vo, x_i_vi, 64)
            .gpu_threads(x_i_vi)
            .gpu_blocks(y);
    }
    {
        Var x = f36.args()[0];
        Var y = f36.args()[1];
        f36
            .compute_root()
            .split(x, x_o, x_i, 64)
            .reorder(x_i, x_o, y)
            .split(x_i, x_i_vo, x_i_vi, 64)
            .gpu_threads(x_i_vi)
            .gpu_blocks(y);
    }
    {
        Var x = f42.args()[0];
        Var y = f42.args()[1];
        Var k = f42.args()[2];
        f42
            .compute_root()
            .split(x, x_vo, x_vi, 64)
            .gpu_threads(x_vi)
            .gpu_blocks(k)
            .gpu_blocks(y);
    }
    {
        Var x = f48.args()[0];
        Var y = f48.args()[1];
        f48
            .compute_root()
            .split(x, x_o, x_i, 64)
            .reorder(x_i, x_o, y)
            .split(x_i, x_i_vo, x_i_vi, 64)
            .gpu_threads(x_i_vi)
            .gpu_blocks(y);
    }
    {
        Var x = f54.args()[0];
        Var y = f54.args()[1];
        Var k = f54.args()[2];
        f54
            .compute_root()
            .split(x, x_vo, x_vi, 64)
            .gpu_threads(x_vi)
            .gpu_blocks(k)
            .gpu_blocks(y);
    }
    {
        Var x = f55.args()[0];
        Var y = f55.args()[1];
        Var k = f55.args()[2];
        f55
            .compute_root()
            .split(x, x_vo, x_vi, 64)
            .gpu_threads(x_vi)
            .gpu_blocks(k)
            .gpu_blocks(y);
    }
    {
        Var x = f60.args()[0];
        Var y = f60.args()[1];
        f60
            .compute_root()
            .split(x, x_o, x_i, 64)
            .reorder(x_i, x_o, y)
            .split(x_i, x_i_vo, x_i_vi, 64)
            .gpu_threads(x_i_vi)
            .gpu_blocks(y);
    }
    {
        Var x = f65.args()[0];
        Var y = f65.args()[1];
        Var k = f65.args()[2];
        f65
            .compute_root()
            .split(x, x_vo, x_vi, 64)
            .gpu_threads(x_vi)
            .gpu_blocks(k)
            .gpu_blocks(y);
    }
    {
        Var x = f66.args()[0];
        Var y = f66.args()[1];
        Var k = f66.args()[2];
        f66
            .compute_root()
            .split(x, x_vo, x_vi, 64)
            .gpu_threads(x_vi)
            .gpu_blocks(k)
            .gpu_blocks(y);
    }
    {
        Var x = f67.args()[0];
        Var y = f67.args()[1];
        Var k = f67.args()[2];
        f67
            .compute_root()
            .split(x, x_vo, x_vi, 64)
            .gpu_threads(x_vi)
            .gpu_blocks(k)
            .gpu_blocks(y);
    }
    {
        Var x = f69.args()[0];
        Var y = f69.args()[1];
        f69
            .compute_root()
            .split(x, x_o, x_i, 64)
            .reorder(x_i, x_o, y)
            .split(x_i, x_i_vo, x_i_vi, 64)
            .gpu_threads(x_i_vi)
            .gpu_blocks(y);
    }
    {
        Var x = f70.args()[0];
        Var y = f70.args()[1];
        Var k = f70.args()[2];
        f70
            .compute_root()
            .split(x, x_vo, x_vi, 64)
            .gpu_threads(x_vi)
            .gpu_blocks(k)
            .gpu_blocks(y);
    }
    {
        Var x = f71.args()[0];
        Var y = f71.args()[1];
        Var k = f71.args()[2];
        f71
            .compute_root()
            .split(x, x_vo, x_vi, 64)
            .gpu_threads(x_vi)
            .gpu_blocks(k)
            .gpu_blocks(y);
    }
    {
        Var x = f73.args()[0];
        Var y = f73.args()[1];
        Var k = f73.args()[2];
        f73
            .compute_root()
            .split(x, x_vo, x_vi, 64)
            .gpu_threads(x_vi)
            .gpu_blocks(k)
            .gpu_blocks(y);
    }
    {
        Var x = f74.args()[0];
        Var y = f74.args()[1];
        f74
            .compute_root()
            .split(x, x_o, x_i, 64)
            .reorder(x_i, x_o, y)
            .split(x_i, x_i_vo, x_i_vi, 64)
            .gpu_threads(x_i_vi)
            .gpu_blocks(y);
    }
    {
        Var x = mirror_image_1.args()[0];
        Var y = mirror_image_1.args()[1];
        Var k = mirror_image_1.args()[2];
        mirror_image_1
            .compute_root()
            .split(x, x_vo, x_vi, 64)
            .gpu_threads(x_vi)
            .gpu_blocks(k)
            .gpu_blocks(y);
    }
    {
        Var x = mirror_image_10.args()[0];
        Var y = mirror_image_10.args()[1];
        Var k = mirror_image_10.args()[2];
        mirror_image_10
            .compute_root()
            .split(x, x_vo, x_vi, 64)
            .gpu_threads(x_vi)
            .gpu_blocks(k)
            .gpu_blocks(y);
    }
    {
        Var x = mirror_image_14.args()[0];
        Var y = mirror_image_14.args()[1];
        Var k = mirror_image_14.args()[2];
        mirror_image_14
            .compute_root()
            .split(x, x_vo, x_vi, 64)
            .gpu_threads(x_vi)
            .gpu_blocks(k)
            .gpu_blocks(y);
    }
    {
        Var x = mirror_image_4.args()[0];
        Var y = mirror_image_4.args()[1];
        Var k = mirror_image_4.args()[2];
        mirror_image_4
            .compute_root()
            .split(x, x_vo, x_vi, 64)
            .gpu_threads(x_vi)
            .gpu_blocks(k)
            .gpu_blocks(y);
    }
    {
        Var x = mirror_image_7.args()[0];
        Var y = mirror_image_7.args()[1];
        Var k = mirror_image_7.args()[2];
        mirror_image_7
            .compute_root()
            .split(x, x_vo, x_vi, 64)
            .gpu_threads(x_vi)
            .gpu_blocks(k)
            .gpu_blocks(y);
    }
    {
        Var x = pInput_2.args()[0];
        Var y = pInput_2.args()[1];
        Var k = pInput_2.args()[2];
        pInput_2
            .compute_root()
            .split(x, x_vo, x_vi, 64)
            .gpu_threads(x_vi)
            .gpu_blocks(k)
            .gpu_blocks(y);
    }
    {
        r
            .compute_root();
    }
    {
        Var x = resampled.args()[0];
        RVar dom$x(resampled.update(0).get_schedule().rvars()[0].var);
        RVar dom$y(resampled.update(0).get_schedule().rvars()[1].var);
        resampled
            .compute_at(Kvzu_1, x_o)
            .split(x, x_vo, x_vi, 64)
            .gpu_threads(x_vi);
        resampled.update(0)
            .reorder(dom$x, x, dom$y, y, k)
            .split(x, x_vo, x_vi, 8, TailStrategy::GuardWithIf)
            .gpu_threads(x_vi);
    }
    {
        Var x = resampled_1.args()[0];
        Var y = resampled_1.args()[1];
        Var k = resampled_1.args()[2];
        RVar dom$x(resampled_1.update(0).get_schedule().rvars()[0].var);
        RVar dom$y(resampled_1.update(0).get_schedule().rvars()[1].var);
        resampled_1
            .compute_root()
            .split(x, x_vo, x_vi, 128)
            .gpu_threads(x_vi)
            .gpu_blocks(k)
            .gpu_blocks(y);
        resampled_1.update(0)
            .reorder(dom$x, x, dom$y, y, k)
            .split(x, x_vo, x_vi, 128, TailStrategy::GuardWithIf)
            .gpu_threads(x_vi)
            .gpu_blocks(k)
            .gpu_blocks(y);
    }
    {
        Var x = resampled_2.args()[0];
        RVar dom$x(resampled_2.update(0).get_schedule().rvars()[0].var);
        RVar dom$y(resampled_2.update(0).get_schedule().rvars()[1].var);
        resampled_2
            .compute_at(Kvzu_3, x_o)
            .split(x, x_vo, x_vi, 64)
            .gpu_threads(x_vi);
        resampled_2.update(0)
            .reorder(dom$x, x, dom$y, y, k)
            .split(x, x_vo, x_vi, 8, TailStrategy::GuardWithIf)
            .gpu_threads(x_vi);
    }
    {
        Var x = resampled_3.args()[0];
        Var y = resampled_3.args()[1];
        Var k = resampled_3.args()[2];
        RVar dom$x(resampled_3.update(0).get_schedule().rvars()[0].var);
        RVar dom$y(resampled_3.update(0).get_schedule().rvars()[1].var);
        resampled_3
            .compute_root()
            .split(x, x_vo, x_vi, 128)
            .gpu_threads(x_vi)
            .gpu_blocks(k)
            .gpu_blocks(y);
        resampled_3.update(0)
            .reorder(dom$x, x, dom$y, y, k)
            .split(x, x_vo, x_vi, 128, TailStrategy::GuardWithIf)
            .gpu_threads(x_vi)
            .gpu_blocks(k)
            .gpu_blocks(y);
    }
    {
        Var x = resampled_4.args()[0];
        RVar dom$x(resampled_4.update(0).get_schedule().rvars()[0].var);
        RVar dom$y(resampled_4.update(0).get_schedule().rvars()[1].var);
        resampled_4
            .compute_at(Kvzu_5, x_o)
            .split(x, x_vo, x_vi, 64)
            .gpu_threads(x_vi);
        resampled_4.update(0)
            .reorder(dom$x, x, dom$y, y, k)
            .split(x, x_vo, x_vi, 8, TailStrategy::GuardWithIf)
            .gpu_threads(x_vi);
    }
    {
        Var x = resampled_5.args()[0];
        Var y = resampled_5.args()[1];
        Var k = resampled_5.args()[2];
        RVar dom$x(resampled_5.update(0).get_schedule().rvars()[0].var);
        RVar dom$y(resampled_5.update(0).get_schedule().rvars()[1].var);
        resampled_5
            .compute_root()
            .split(x, x_vo, x_vi, 128)
            .gpu_threads(x_vi)
            .gpu_blocks(k)
            .gpu_blocks(y);
        resampled_5.update(0)
            .reorder(dom$x, x, dom$y, y, k)
            .split(x, x_vo, x_vi, 128, TailStrategy::GuardWithIf)
            .gpu_threads(x_vi)
            .gpu_blocks(k)
            .gpu_blocks(y);
    }
    {
        Var x = resampled_6.args()[0];
        RVar dom$x(resampled_6.update(0).get_schedule().rvars()[0].var);
        RVar dom$y(resampled_6.update(0).get_schedule().rvars()[1].var);
        resampled_6
            .compute_at(Kvzu_7, x_o)
            .split(x, x_vo, x_vi, 64)
            .gpu_threads(x_vi);
        resampled_6.update(0)
            .reorder(dom$x, x, dom$y, y, k)
            .split(x, x_vo, x_vi, 8, TailStrategy::GuardWithIf)
            .gpu_threads(x_vi);
    }
    {
        Var x = resampled_7.args()[0];
        Var y = resampled_7.args()[1];
        Var k = resampled_7.args()[2];
        RVar dom$x(resampled_7.update(0).get_schedule().rvars()[0].var);
        RVar dom$y(resampled_7.update(0).get_schedule().rvars()[1].var);
        resampled_7
            .compute_root()
            .split(x, x_vo, x_vi, 128)
            .gpu_threads(x_vi)
            .gpu_blocks(k)
            .gpu_blocks(y);
        resampled_7.update(0)
            .reorder(dom$x, x, dom$y, y, k)
            .split(x, x_vo, x_vi, 128, TailStrategy::GuardWithIf)
            .gpu_threads(x_vi)
            .gpu_blocks(k)
            .gpu_blocks(y);
    }
    {
        Var x = resampled_8.args()[0];
        Var y = resampled_8.args()[1];
        Var k = resampled_8.args()[2];
        RVar dom$x(resampled_8.update(0).get_schedule().rvars()[0].var);
        RVar dom$y(resampled_8.update(0).get_schedule().rvars()[1].var);
        resampled_8
            .compute_root()
            .split(x, x_vo, x_vi, 64)
            .gpu_threads(x_vi)
            .gpu_blocks(k)
            .gpu_blocks(y);
        resampled_8.update(0)
            .reorder(dom$x, x, dom$y, y, k)
            .split(x, x_vo, x_vi, 8, TailStrategy::GuardWithIf)
            .gpu_threads(x_vi)
            .gpu_blocks(k)
            .gpu_blocks(y);
    }
    for(auto* _s : {
        &resampled_at,
        &resampled_at_1,
        &resampled_at_2,
        &resampled_at_3,
        &resampled_at_4,
        &resampled_at_5
    })
    {
        Func& s = *_s;
        //Var x = resampled_at.args()[0];
        const RVar dom$x(s.rvars(0)[0]);
        const RVar dom$y(s.rvars(0)[1]);
        s
            //.compute_at(blurred_x_1, x_o)
            .compute_root()
            .split(x, x_o, x_i, 128)
            .gpu_threads(x_i)
            .gpu_blocks(x_o)
            .gpu_blocks(k)
            .gpu_blocks(y);
        s.update(0)
            .tile(x, y, x_o, y_o, x_i, y_i, 128, 4)
            .reorder(dom$x, dom$y, x_i, y_i, x_o, y_o, k)
            .unroll(dom$x)
            .unroll(dom$y)
            .gpu_threads(x_i)
            .gpu_threads(y_i)
            .gpu_blocks(x_o)
            .gpu_blocks(y_o)
            .gpu_blocks(k)
            ;
    }
    if constexpr (false) {
        // Error: Symbol not found: t16356
        const RVar dom$x(resampled_at_3.rvars(0)[0]);
        const RVar dom$y(resampled_at_3.rvars(0)[1]);
        resampled_at_3
            .compute_root()
            .split(x, x_o, x_i, 128)
            .gpu_threads(x_i)
            .gpu_blocks(x_o)
            .gpu_blocks(k)
            .gpu_blocks(y);
        resampled_at_3.update(0)
            //.reorder(dom$x, x, dom$y, y, k)
            .unroll(dom$x)
            .unroll(dom$y)
            .split(x, x_o, x_i, 128, TailStrategy::GuardWithIf)
            .gpu_threads(x_i)
            .gpu_blocks(x_o)
            .gpu_blocks(k)
            .gpu_blocks(y);
    }
    {
        Var x = resampled_sum.args()[0];
        RVar all_shifts$x(resampled_sum.update(0).get_schedule().rvars()[0].var);
        resampled_sum
            .compute_at(blurred_x_1, x_o)
            .split(x, x_vo, x_vi, 64)
            .gpu_threads(x_vi);
        resampled_sum.update(0)
            .reorder(x, all_shifts$x, y)
            .split(x, x_vo, x_vi, 8, TailStrategy::GuardWithIf)
            .gpu_threads(x_vi);
    }
    {
        Var x = resampled_sum_1.args()[0];
        RVar all_shifts$x(resampled_sum_1.update(0).get_schedule().rvars()[0].var);
        resampled_sum_1
            .compute_at(blurred_x_4, x_o)
            .split(x, x_vo, x_vi, 64)
            .gpu_threads(x_vi);
        resampled_sum_1.update(0)
            .reorder(x, all_shifts$x, y)
            .split(x, x_vo, x_vi, 8, TailStrategy::GuardWithIf)
            .gpu_threads(x_vi);
    }
    {
        Var x = resampled_sum_2.args()[0];
        RVar all_shifts$x(resampled_sum_2.update(0).get_schedule().rvars()[0].var);
        resampled_sum_2
            .compute_at(blurred_x_7, x_o)
            .split(x, x_vo, x_vi, 64)
            .gpu_threads(x_vi);
        resampled_sum_2.update(0)
            .reorder(x, all_shifts$x, y)
            .split(x, x_vo, x_vi, 8, TailStrategy::GuardWithIf)
            .gpu_threads(x_vi);
    }
    {
        Var x = resampled_sum_3.args()[0];
        RVar all_shifts$x(resampled_sum_3.update(0).get_schedule().rvars()[0].var);
        resampled_sum_3
            .compute_at(blurred_x_10, x_o)
            .split(x, x_vo, x_vi, 64)
            .gpu_threads(x_vi);
        resampled_sum_3.update(0)
            .reorder(x, all_shifts$x, y)
            .split(x, x_vo, x_vi, 8, TailStrategy::GuardWithIf)
            .gpu_threads(x_vi);
    }
    {
        Var x = resampled_sum_4.args()[0];
        RVar all_shifts$x(resampled_sum_4.update(0).get_schedule().rvars()[0].var);
        resampled_sum_4
            .compute_at(blurred_x_13, x_o)
            .split(x, x_vo, x_vi, 64)
            .gpu_threads(x_vi);
        resampled_sum_4.update(0)
            .reorder(x, all_shifts$x, y)
            .split(x, x_vo, x_vi, 8, TailStrategy::GuardWithIf)
            .gpu_threads(x_vi);
    }
    {
        Var x = resampled_sum_5.args()[0];
        RVar all_shifts$x(resampled_sum_5.update(0).get_schedule().rvars()[0].var);
        resampled_sum_5
            .compute_at(blurred_x_14, x_o)
            .split(x, x_vo, x_vi, 64)
            .gpu_threads(x_vi);
        resampled_sum_5.update(0)
            .reorder(x, all_shifts$x, y)
            .split(x, x_vo, x_vi, 8, TailStrategy::GuardWithIf)
            .gpu_threads(x_vi);
    }
    {
        s
            .compute_root();
    }
    for(auto* s : {&scaled,
        &scaled_2,
        &scaled_3,
        &scaled_5,
        &scaled_6,
        &scaled_8,
        &scaled_9,
        &scaled_11})
    {
        (*s)
            .compute_root()
            .split(x, x_o, x_i, 64)
            .split(y, y_o, y_i, 64)
            .reorder(x_i, y_i, x_o, y_o)
            .gpu_threads(x_i)
            .gpu_blocks(y_o)
            .gpu_blocks(x_o);
    }

    RVar rxo, ryo, rxi, ryi;
    for (auto* _s : {
        &sumsq,
        &sumsq_2,
        &sumsq_3,
        &sumsq_4,
        &sumsq_5,
        &sumsq_6,
        &sumsq_7
    })
    {
        auto& s = *_s;
        s
            .compute_root();

        RVar rx(s.update(0).get_schedule().rvars()[0].var);
        RVar ry(s.update(0).get_schedule().rvars()[1].var);
        s.update(0)
            .tile(rx, ry, rxo, ryo, rxi, ryi, 32, 32);

        Var ux, uy, fused;
        auto s_intm = s.update(0)
            .rfactor({{rxo, ux}, {ryo, uy}})
            .compute_root()
            .gpu_threads(ux)
            .gpu_blocks(uy);

        s_intm.update()
            .atomic()
            .gpu_threads(ux)
            .gpu_blocks(uy);

        s.update(0)
            .atomic()
            .gpu_threads(rxo)
            .gpu_blocks(ryo);
    }
    {
        Var x = v_new.args()[0];
        Var y = v_new.args()[1];
        v_new
            .compute_root()
            .split(x, x_vo, x_vi, 64)
            .gpu_threads(x_vi)
            .gpu_blocks(y);
    }
    {
        Var x = xhat_2.args()[0];
        Var y = xhat_2.args()[1];
        Var c = xhat_2.args()[2];
        xhat_2
            .compute_root()
            .split(x, x_vo, x_vi, 64)
            .gpu_threads(x_vi)
            .gpu_blocks(c)
            .gpu_blocks(y);
    }
    {
        Var x = xhat_3.args()[0];
        Var y = xhat_3.args()[1];
        Var c = xhat_3.args()[2];
        xhat_3
            .compute_root()
            .split(x, x_vo, x_vi, 64)
            .gpu_threads(x_vi)
            .gpu_blocks(c)
            .gpu_blocks(y);
    }


}

#endif  // ladmm_iter_SCHEDULE_H
