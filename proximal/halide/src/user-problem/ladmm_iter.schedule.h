#ifndef ladmm_iter_SCHEDULE_H
#define ladmm_iter_SCHEDULE_H

// MACHINE GENERATED -- DO NOT EDIT
// This schedule was automatically generated by Mullapudi2016
// for target=x86-64-linux-tune_znver1-avx-avx2-cuda-cuda_capability_75-f16c-fma-sse41  // NOLINT
// with autoscheduler_params=autoscheduler=Mullapudi2016 autoscheduler.balance=20 autoscheduler.last_level_cache_size=47000 autoscheduler.parallelism=128

#include "Halide.h"


inline void apply_schedule_ladmm_iter(
    ::Halide::Pipeline pipeline,
    ::Halide::Target target
) {
    using ::Halide::Func;
    using ::Halide::MemoryType;
    using ::Halide::RVar;
    using ::Halide::TailStrategy;
    using ::Halide::Var;
    Var i_i("i_i");
    Var i_o("i_o");
    Var c_i("c_i");
    Var c_o("c_o");
    Var x_i("x_i");
    Var x_o("x_o");
    Var y_i("y_i");
    Var y_o("y_o");
    Var k_o("k_o");
    Var k_i("k_i");
    Var x_vo("x_vo");
    Var x_vi("x_vi");

    Func Kvzu_1 = pipeline.get_func(28);
    Func Kx_2 = pipeline.get_func(69);
    Func blurred = pipeline.get_func(18);
    Func blurred_1 = pipeline.get_func(37);
    Func blurred_2 = pipeline.get_func(53);
    Func blurred_3 = pipeline.get_func(74);
    Func blurred_4 = pipeline.get_func(121);
    Func blurred_5 = pipeline.get_func(100);
    Func blurred_x_adj = pipeline.get_func(36);
    Func blurred_x_adj_1 = pipeline.get_func(120);
    Func blurred_x_adj_2 = pipeline.get_func(99);
    Func blurred_x_fwd = pipeline.get_func(17);
    Func blurred_x_fwd_1 = pipeline.get_func(52);
    Func blurred_x_fwd_2 = pipeline.get_func(73);
    Func dx_1 = pipeline.get_func(43);
    Func dy_1 = pipeline.get_func(44);
    Func eps_dual = pipeline.get_func(125);
    Func eps_pri = pipeline.get_func(107);
    Func f14 = pipeline.get_func(49);
    Func f18 = pipeline.get_func(123);
    Func f23 = pipeline.get_func(102);
    Func kernel = pipeline.get_func(15);
    Func kernel_1 = pipeline.get_func(14);
    Func kernel_2 = pipeline.get_func(50);
    Func kernel_3 = pipeline.get_func(71);
    Func kernel_4 = pipeline.get_func(112);
    Func kernel_5 = pipeline.get_func(90);
    Func mirror_image_1 = pipeline.get_func(8);
    Func mirror_image_5 = pipeline.get_func(86);
    Func r = pipeline.get_func(84);
    Func r_1 = pipeline.get_func(70);
    Func r_2 = pipeline.get_func(82);
    Func resampled_1 = pipeline.get_func(60);
    Func resampled_2 = pipeline.get_func(81);
    Func resampled_sum = pipeline.get_func(34);
    Func resampled_sum_1 = pipeline.get_func(118);
    Func resampled_sum_2 = pipeline.get_func(97);
    Func s = pipeline.get_func(104);
    Func scaled = pipeline.get_func(19);
    Func scaled_2 = pipeline.get_func(54);
    Func shift_scaled = pipeline.get_func(13);
    Func sumsq = pipeline.get_func(105);
    Func sumsq_1 = pipeline.get_func(106);
    Func sumsq_2 = pipeline.get_func(124);
    Func sumsq_3 = pipeline.get_func(83);
    Func sumsq_4 = pipeline.get_func(103);
    Func u_new = pipeline.get_func(64);
    Func u_new_1 = pipeline.get_func(65);
    Func v_new_1 = pipeline.get_func(41);
    Func xhat = pipeline.get_func(63);
    Func z_diff_1 = pipeline.get_func(91);

    {
        Var x = Kvzu_1.args()[0];
        Var y = Kvzu_1.args()[1];
        Var k = Kvzu_1.args()[2];
        Kvzu_1
            .compute_root()
            .tile({x, y, k}, {x_vo, y_o, k_o}, {x_vi, y_i, k_i}, {32, 32, 1}).gpu(x_vo, x_vi).gpu(y_o, y_i).gpu(k_o, k_i);
    }
    {
        Var x = Kx_2.args()[0];
        Var y = Kx_2.args()[1];
        Var k = Kx_2.args()[2];
        Kx_2
            .compute_root()
            .tile({x, y, k}, {x_vo, y_o, k_o}, {x_vi, y_i, k_i}, {32, 32, 1}).gpu(x_vo, x_vi).gpu(y_o, y_i).gpu(k_o, k_i);
    }
    {
        RVar blur_window$x(blurred.update(0).get_schedule().rvars()[0].var);
        blurred
            .compute_at(scaled, x_o);
        blurred.update(0)
            .reorder(x, blur_window$x, y);
    }
    {
        RVar blur_window$x(blurred_1.update(0).get_schedule().rvars()[0].var);
        blurred_1
            .compute_at(v_new_1, x_i);
        blurred_1.update(0)
            .reorder(x, blur_window$x, y);
    }
    {
        RVar blur_window$x(blurred_2.update(0).get_schedule().rvars()[0].var);
        blurred_2
            .compute_at(scaled_2, x_o);
        blurred_2.update(0)
            .reorder(x, blur_window$x, y);
    }
    {
        Var x = blurred_3.args()[0];
        Var y = blurred_3.args()[1];
        RVar blur_window$x(blurred_3.update(0).get_schedule().rvars()[0].var);
        blurred_3
            .compute_root()
            .tile(x, y, x_vo, y_o, x_vi, y_i, 32, 32).gpu(x_vo, x_vi).gpu(y_o, y_i);
        blurred_3.update(0)
            .split(x, x_o, x_i, 64, TailStrategy::GuardWithIf)
            .split(y, y_o, y_i, 16, TailStrategy::GuardWithIf)
            .reorder(blur_window$x, x_i, y_i, x_o, y_o)
            .gpu_threads(x_i)
            .gpu_threads(y_i)
            .gpu_blocks(x_o)
            .gpu_blocks(y_o);
    }
    {
        RVar blur_window$x(blurred_4.update(0).get_schedule().rvars()[0].var);
        blurred_4
            .compute_at(f18, x_i);
        blurred_4.update(0)
            .reorder(x, blur_window$x, y);
    }
    {
        RVar blur_window$x(blurred_5.update(0).get_schedule().rvars()[0].var);
        blurred_5
            .compute_at(f23, x_i);
        blurred_5.update(0)
            .reorder(x, blur_window$x, y);
    }
    {
        Var x = blurred_x_adj.args()[0];
        Var y = blurred_x_adj.args()[1];
        RVar blur_window$x(blurred_x_adj.update(0).get_schedule().rvars()[0].var);
        blurred_x_adj
            .compute_root()
            .tile(x, y, x_vo, y_o, x_vi, y_i, 32, 32).gpu(x_vo, x_vi).gpu(y_o, y_i);
        blurred_x_adj.update(0)
            .split(x, x_o, x_i, 256, TailStrategy::GuardWithIf)
            .reorder(blur_window$x, x_i, x_o, y)
            .gpu_threads(x_i)
            .gpu_blocks(x_o)
            .gpu_blocks(y);
    }
    {
        Var x = blurred_x_adj_1.args()[0];
        Var y = blurred_x_adj_1.args()[1];
        RVar blur_window$x(blurred_x_adj_1.update(0).get_schedule().rvars()[0].var);
        blurred_x_adj_1
            .compute_root()
            .tile(x, y, x_vo, y_o, x_vi, y_i, 32, 32).gpu(x_vo, x_vi).gpu(y_o, y_i);
        blurred_x_adj_1.update(0)
            .split(x, x_o, x_i, 256, TailStrategy::GuardWithIf)
            .reorder(blur_window$x, x_i, x_o, y)
            .gpu_threads(x_i)
            .gpu_blocks(x_o)
            .gpu_blocks(y);
    }
    {
        Var x = blurred_x_adj_2.args()[0];
        Var y = blurred_x_adj_2.args()[1];
        RVar blur_window$x(blurred_x_adj_2.update(0).get_schedule().rvars()[0].var);
        blurred_x_adj_2
            .compute_root()
            .tile(x, y, x_vo, y_o, x_vi, y_i, 32, 32).gpu(x_vo, x_vi).gpu(y_o, y_i);
        blurred_x_adj_2.update(0)
            .split(x, x_o, x_i, 256, TailStrategy::GuardWithIf)
            .reorder(blur_window$x, x_i, x_o, y)
            .gpu_threads(x_i)
            .gpu_blocks(x_o)
            .gpu_blocks(y);
    }
    {
        blurred_x_fwd
            .compute_at(scaled, x_o);
    }
    {
        blurred_x_fwd_1
            .compute_at(scaled_2, x_o);
    }
    {
        blurred_x_fwd_2
            .compute_at(blurred_3, x_o);
    }
    {
        Var x = dx_1.args()[0];
        Var y = dx_1.args()[1];
        dx_1
            .compute_root()
            .tile(x, y, x_vo, y_o, x_vi, y_i, 32, 32).gpu(x_vo, x_vi).gpu(y_o, y_i);
    }
    {
        Var x = dy_1.args()[0];
        Var y = dy_1.args()[1];
        dy_1
            .compute_root()
            .tile(x, y, x_vo, y_o, x_vi, y_i, 32, 32).gpu(x_vo, x_vi).gpu(y_o, y_i);
    }
    {
        eps_dual
            .compute_root()
            .gpu_single_thread();
    }
    {
        eps_pri
            .compute_root()
            .gpu_single_thread();
    }
    {
        Var x = f14.args()[0];
        Var y = f14.args()[1];
        Var k = f14.args()[2];
        f14
            .compute_root()
            .tile({x, y, k}, {x_vo, y_o, k_o}, {x_vi, y_i, k_i}, {32, 32, 1}).gpu(x_vo, x_vi).gpu(y_o, y_i).gpu(k_o, k_i);
    }
    {
        Var x = f18.args()[0];
        Var y = f18.args()[1];
        f18
            .compute_root()
            .split(x, x_o, x_i, 64)
            .reorder(x_i, x_o, y)
            .gpu_threads(x_i)
            .gpu_blocks(x_o)
            .gpu_blocks(y);
    }
    {
        Var x = f23.args()[0];
        Var y = f23.args()[1];
        f23
            .compute_root()
            .split(x, x_o, x_i, 64)
            .reorder(x_i, x_o, y)
            .gpu_threads(x_i)
            .gpu_blocks(x_o)
            .gpu_blocks(y);
    }
    {
        Var i = kernel.args()[0];
        Var k = kernel.args()[1];
        kernel
            .compute_root()
            .tile(i, k, i_o, k_o, i_i, k_i, 2, 32).gpu(i_o, i_i).gpu(k_o, k_i);
    }
    {
        Var i = kernel_1.args()[0];
        Var k = kernel_1.args()[1];
        kernel_1
            .compute_root()
            .tile(i, k, i_o, k_o, i_i, k_i, 2, 32).gpu(i_o, i_i).gpu(k_o, k_i);
    }
    {
        Var i = kernel_2.args()[0];
        Var k = kernel_2.args()[1];
        kernel_2
            .compute_root()
            .tile(i, k, i_o, k_o, i_i, k_i, 2, 32).gpu(i_o, i_i).gpu(k_o, k_i);
    }
    {
        Var i = kernel_3.args()[0];
        Var k = kernel_3.args()[1];
        kernel_3
            .compute_root()
            .tile(i, k, i_o, k_o, i_i, k_i, 2, 32).gpu(i_o, i_i).gpu(k_o, k_i);
    }
    {
        Var i = kernel_4.args()[0];
        Var k = kernel_4.args()[1];
        kernel_4
            .compute_root()
            .tile(i, k, i_o, k_o, i_i, k_i, 2, 32).gpu(i_o, i_i).gpu(k_o, k_i);
    }
    {
        Var i = kernel_5.args()[0];
        Var k = kernel_5.args()[1];
        kernel_5
            .compute_root()
            .tile(i, k, i_o, k_o, i_i, k_i, 2, 32).gpu(i_o, i_i).gpu(k_o, k_i);
    }
    {
        Var x = mirror_image_1.args()[0];
        Var y = mirror_image_1.args()[1];
        Var k = mirror_image_1.args()[2];
        mirror_image_1
            .compute_root()
            .tile({x, y, k}, {x_vo, y_o, k_o}, {x_vi, y_i, k_i}, {32, 32, 1}).gpu(x_vo, x_vi).gpu(y_o, y_i).gpu(k_o, k_i);
    }
    {
        Var x = mirror_image_5.args()[0];
        Var y = mirror_image_5.args()[1];
        Var k = mirror_image_5.args()[2];
        mirror_image_5
            .compute_root()
            .tile({x, y, k}, {x_vo, y_o, k_o}, {x_vi, y_i, k_i}, {32, 32, 1}).gpu(x_vo, x_vi).gpu(y_o, y_i).gpu(k_o, k_i);
    }
    {
        r
            .compute_root()
            .gpu_single_thread();
    }
    {
        Var x = r_1.args()[0];
        Var y = r_1.args()[1];
        Var k = r_1.args()[2];
        r_1
            .compute_root()
            .tile({x, y, k}, {x_vo, y_o, k_o}, {x_vi, y_i, k_i}, {32, 32, 1}).gpu(x_vo, x_vi).gpu(y_o, y_i).gpu(k_o, k_i);
    }
    {
        Var x = r_2.args()[0];
        Var y = r_2.args()[1];
        Var k = r_2.args()[2];
        r_2
            .compute_root()
            .tile({x, y, k}, {x_vo, y_o, k_o}, {x_vi, y_i, k_i}, {32, 32, 1}).gpu(x_vo, x_vi).gpu(y_o, y_i).gpu(k_o, k_i);
    }
    {
        Var x = resampled_1.args()[0];
        Var y = resampled_1.args()[1];
        Var k = resampled_1.args()[2];
        resampled_1
            .compute_root()
            .tile({x, y, k}, {x_vo, y_o, k_o}, {x_vi, y_i, k_i}, {32, 32, 1}).gpu(x_vo, x_vi).gpu(y_o, y_i).gpu(k_o, k_i);
    }
    {
        Var x = resampled_2.args()[0];
        Var y = resampled_2.args()[1];
        Var k = resampled_2.args()[2];
        resampled_2
            .compute_root()
            .tile({x, y, k}, {x_vo, y_o, k_o}, {x_vi, y_i, k_i}, {32, 32, 1}).gpu(x_vo, x_vi).gpu(y_o, y_i).gpu(k_o, k_i);
    }
    {
        RVar all_shifts$x(resampled_sum.update(0).get_schedule().rvars()[0].var);
        resampled_sum
            .compute_at(blurred_x_adj, x_i);
        resampled_sum.update(0)
            .reorder(x, y, all_shifts$x);
    }
    {
        RVar all_shifts$x(resampled_sum_1.update(0).get_schedule().rvars()[0].var);
        resampled_sum_1
            .compute_at(blurred_x_adj_1, x_i);
        resampled_sum_1.update(0)
            .reorder(x, y, all_shifts$x);
    }
    {
        RVar all_shifts$x(resampled_sum_2.update(0).get_schedule().rvars()[0].var);
        resampled_sum_2
            .compute_at(blurred_x_adj_2, x_i);
        resampled_sum_2.update(0)
            .reorder(x, y, all_shifts$x);
    }
    {
        s
            .compute_root()
            .gpu_single_thread();
    }
    {
        Var x = scaled.args()[0];
        Var y = scaled.args()[1];
        scaled
            .compute_root()
            .split(x, x_o, x_i, 64)
            .split(y, y_o, y_i, 16)
            .reorder(x_i, y_i, x_o, y_o)
            .gpu_threads(x_i)
            .gpu_threads(y_i)
            .gpu_blocks(x_o)
            .gpu_blocks(y_o);
    }
    {
        Var x = scaled_2.args()[0];
        Var y = scaled_2.args()[1];
        scaled_2
            .compute_root()
            .split(x, x_o, x_i, 64)
            .split(y, y_o, y_i, 16)
            .reorder(x_i, y_i, x_o, y_o)
            .gpu_threads(x_i)
            .gpu_threads(y_i)
            .gpu_blocks(x_o)
            .gpu_blocks(y_o);
    }
    {
        Var i = shift_scaled.args()[0];
        Var k = shift_scaled.args()[1];
        shift_scaled
            .compute_root()
            .tile(i, k, i_o, k_o, i_i, k_i, 2, 32).gpu(i_o, i_i).gpu(k_o, k_i);
    }
    const RVar rxo{"rxo"}, rxi{"rxi"};
    const RVar ryo{"ryo"}, ryi{"ryi"};
    const RVar rzo{"rzo"}, rzi{"rzi"};
    const Var u{"u"}, v{"v"}, w{"w"};

    const auto parallelizeScalarReduction2D = [&](Func& p, int k) {
        const RVar rx(p.update(k).get_schedule().rvars()[0].var);
        const RVar ry(p.update(k).get_schedule().rvars()[1].var);

        p.update(k)  //
            .tile(rx, ry, rxo, ryo, rxi, ryi, 32, 32);

        auto intm = p.update(k)  //
                        .rfactor({{rxo, u}, {ryo, v}})
                        .compute_root()
                        .gpu_blocks(v)
                        .gpu_threads(u);

        intm.update()
            .gpu_blocks(v)
            .gpu_threads(u)
            .atomic();

        p.update(k)  //
            .atomic()
            .gpu_blocks(ryo)
            .gpu_threads(rxo);
    };

    const auto parallelizeScalarReduction3D = [&](Func& p, int k) {
        const RVar rx(p.update(k).get_schedule().rvars()[0].var);
        const RVar ry(p.update(k).get_schedule().rvars()[1].var);
        const RVar rz(p.update(k).get_schedule().rvars().at(2).var);

        p.update(k)  //
            .tile({rx, ry, rz}, {rxo, ryo, rzo}, {rxi, ryi, rzi}, {16, 16, 8});

        auto intm = p.update(k)  //
                        .rfactor({{rxo, u}, {ryo, v}, {rzo, w}})
                        .compute_root()
                        .gpu_blocks(w)
                        .gpu_blocks(v)
                        .gpu_threads(u);

        intm.update()
            .gpu_blocks(w)
            .gpu_blocks(v)
            .gpu_threads(u)
            .atomic();

        p.update(k)  //
            .atomic()
            .gpu_blocks(rzo)
            .gpu_blocks(ryo)
            .gpu_threads(rxo);
    };

    for (auto* p : {&sumsq, &sumsq_1, &sumsq_3}) {
        p->compute_root().gpu_single_thread();

        parallelizeScalarReduction3D(*p, 0);
        parallelizeScalarReduction3D(*p, 1);
    }
    for (auto* p : {&sumsq_2, &sumsq_4}) {
        p->compute_root().gpu_single_thread();

        parallelizeScalarReduction2D(*p, 0);
    }
    {
        Var x = u_new.args()[0];
        Var y = u_new.args()[1];
        Var k = u_new.args()[2];
        u_new
            .compute_root()
            .tile({x, y, k}, {x_vo, y_o, k_o}, {x_vi, y_i, k_i}, {32, 32, 1}).gpu(x_vo, x_vi).gpu(y_o, y_i).gpu(k_o, k_i);
    }
    {
        Var x = u_new_1.args()[0];
        Var y = u_new_1.args()[1];
        Var k = u_new_1.args()[2];
        u_new_1
            .compute_root()
            .tile({x, y, k}, {x_vo, y_o, k_o}, {x_vi, y_i, k_i}, {32, 32, 1}).gpu(x_vo, x_vi).gpu(y_o, y_i).gpu(k_o, k_i);
    }
    {
        Var x = v_new_1.args()[0];
        Var y = v_new_1.args()[1];
        v_new_1
            .compute_root()
            .split(x, x_o, x_i, 64)
            .reorder(x_i, x_o, y)
            .gpu_threads(x_i)
            .gpu_blocks(x_o)
            .gpu_blocks(y);
    }
    {
        Var x = xhat.args()[0];
        Var y = xhat.args()[1];
        Var c = xhat.args()[2];
        xhat
            .compute_root()
            .tile({x, y, c}, {x_vo, y_o, c_o}, {x_vi, y_i, c_i}, {32, 32, 1}).gpu(x_vo, x_vi).gpu(y_o, y_i).gpu(c_o, c_i);
    }
    {
        Var x = z_diff_1.args()[0];
        Var y = z_diff_1.args()[1];
        Var k = z_diff_1.args()[2];
        z_diff_1
            .compute_root()
            .tile({x, y, k}, {x_vo, y_o, k_o}, {x_vi, y_i, k_i}, {32, 32, 1}).gpu(x_vo, x_vi).gpu(y_o, y_i).gpu(k_o, k_i);
    }


}

#endif  // ladmm_iter_SCHEDULE_H
